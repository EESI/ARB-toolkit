#!/usr/bin/env python
#
#  Program: convert_leaf_names.py
#
#  Description: convert clade names from a newick phylogenic to the new names provided by rename_tree_leaves.py
# 
#  Example: 
#
#  convert_leaf_names.py -i mfs.tree -o treelabels.txt 
import Bio.Phylo as p
import sys
import argparse

def main():

    parser = argparse.ArgumentParser(description="converts clade names from a .tree file to new names provided by rename_tree_leaves.py")
    parser.add_argument("-i", "--input", help="input tree file", required=True)
    parser.add_argument("-l", "--labels", help="labels file generated by rename_tree_leaves.py", required=True)
    parser.add_argument("-o", "--output", help="mapped output tree file", required=True)
    args = parser.parse_args()

    tree = p.read(args.input, 'newick')
    out_fh = open(args.output, 'w')
    labels_fh = open(args.labels, 'r')
    labels = {}
    for row in labels_fh:
        old, new = row.split()
        labels[old] = new

    for clade in tree.find_elements({}):
        if clade.name in labels:
            clade.name = labels[clade.name]
        else:
          if clade.name is not None and len(clade.name) is not 0:
            print "Error:", clade.name, "not in db. it won't get mapped to its UID"

    p.write(tree, args.output, 'newick')

if __name__ == "__main__":
	sys.exit(main())
